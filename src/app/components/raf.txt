function(editor) {
          const codeViewer = editor.CodeManager.getViewer('CodeMirror');
          
          
          codeViewer.set({
            codeName: 'htmlmixed',
            readOnly: false, 
            // theme: 'default',
            // autoBeautify: true,
            // autoCloseTags: true,
            // autoCloseBrackets: true,
            // lineNumbers: true,
            // lineWrapping: true,
            // styleActiveLine: true,
            // smartIndent: true,
            // indentWithTabs: true
          });
          
          // Add custom command for code editing
          editor.Commands.add('show-code', {
            run: function(editor) {
              const modal = editor.Modal;
              
              // modal.setTitle('Edit Code');
              
              // Get current HTML
              const htmlContent = editor.getHtml();
              const cssContent = editor.getCss();

              console.log(htmlContent)
              
              // Create tabs for HTML and CSS
              const container = document.createElement('div');
              container.innerHTML = `
                <div class="tabs">
                  <button class="tab-html active">HTML</button>
                  <button class="tab-css">CSS</button>
                  <button>Save</button>
                </div>
                <div class="code-container">
                  <div class="html-code"></div>
                  <div class="css-code" style="display: none;"></div>
                </div>
              `;
              
              modal.setContent(container);
              
              // Initialize code editors
              const htmlEditor = codeViewer.editor.clone();
              const cssEditor = codeViewer.editor.clone();
              
              htmlEditor.setContent(htmlContent);
              cssEditor.setContent(cssContent);
              
              // Add editors to containers
              htmlEditor.init(container.querySelector('.html-code'));
              cssEditor.init(container.querySelector('.css-code'));
              
              if (container) {
                // Handle tab switching
                const tabHtml = container.querySelector('.tab-html') as HTMLElement;
                const tabCss = container.querySelector('.tab-css') as HTMLElement;
                const htmlCode = container.querySelector('.html-code') as HTMLElement;
                const cssCode = container.querySelector('.css-code') as HTMLElement;
              
                if (tabHtml && tabCss && htmlCode && cssCode) {
                  tabHtml.addEventListener('click', () => {
                    htmlCode.style.display = 'block';
                    cssCode.style.display = 'none';
                    tabHtml.classList.add('active');
                    tabCss.classList.remove('active');
                  });
              
                  tabCss.addEventListener('click', () => {
                    htmlCode.style.display = 'none';
                    cssCode.style.display = 'block';
                    tabCss.classList.add('active');
                    tabHtml.classList.remove('active');
                  });
                } else {
                  console.error('One or more elements for tab switching are missing.');
                }
              } else {
                console.error('Container element not found.');
              }
              
              
              const content = document.createElement('div');

              htmlEditor.style.width = '100%';
              htmlEditor.style.height = '150px';
              cssEditor.style.width = '100%';
              cssEditor.style.height = '150px';

              // Set initial content
              htmlEditor.value = editor.getHtml();
              cssEditor.value = editor.getCss();

              // Create an update button
              const updateButton = document.createElement('button');
              updateButton.textContent = 'Update';
              updateButton.className = 'primary-button';
              updateButton.style.marginTop = '10px';

              // Attach event listener to the update button
              updateButton.addEventListener('click', () => {
                // Update editor content
                editor.setComponents(htmlEditor.value);
                editor.setStyle(cssEditor.value);
                modal.close();
              });

              // Append editors and button to the modal content
              content.appendChild(htmlEditor);
              content.appendChild(cssEditor);
              content.appendChild(updateButton);

              // Set modal title and content
              modal.setTitle('Edit Code');
              modal.setContent(content);
              modal.open();
              }
          });
          
        }